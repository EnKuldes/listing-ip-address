# name of github action
name: run-tests

on: # Event happen on
    push:
        branches: [master]
    pull_request:
        branches: [master]

jobs: # List of Jobs
    test: # Test Job on several matrix
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: true
            matrix:
                os: [ubuntu-latest, windows-latest]
                php: [7.4, 8.0]
                laravel: [8.*]
                stability: [prefer-lowest, prefer-stable]
                include:
                    - laravel: ^8.*
                      testbench: ^6.6

        name: P${{ matrix.php }} - L${{ matrix.laravel }} - ${{ matrix.stability }} - ${{ matrix.os }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php }}
                  extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, fileinfo
                  coverage: none

            - name: Setup problem matchers
              run: |
                  echo "::add-matcher::${{ runner.tool_cache }}/php.json"
                  echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"
            - name: Install dependencies
              run: |
                  composer require "laravel/framework:${{ matrix.laravel }}" "orchestra/testbench:${{ matrix.testbench }}" --no-interaction --no-update
                  composer update --${{ matrix.stability }} --prefer-dist --no-interaction
            - name: Execute tests
              run: vendor/bin/phpunit
    pre-release: # Pre Release the Code with tag latest version
      name: "Pre Release"
      needs: [test]
      runs-on: [ubuntu-latest, windows-latest]
      steps:
        - uses: "marvinpinto/action-automatic-releases@latest"
          with:
            repo_token: "${{ secrets.GITHUB_TOKEN }}"
            automatic_release_tag: "latest"
            prerelease: true
            title: "Development Build"
    semantic-version: # Make a link for release tags
      name: "Semantic Versioning"
      needs: [pre-release]
      runs-on: [ubuntu-latest, windows-latest]
      steps:
          - name: Checkout
            uses: actions/checkout@v2
            with:
              fetch-depth: 0
          - name: "Git Semantic Versioning"
            uses: PaulHatch/semantic-version@v5.0.0-alpha2
            with:
              # The prefix to use to identify tags
              tag_prefix: "v"
              # A string which, if present in a git commit, indicates that a change represents a
              # major (breaking) change, supports regular expressions wrapped with '/'
              major_pattern: "(MAJOR)"
              # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
              minor_pattern: "(MINOR)"
              # A string to determine the format of the version output
              version_format: "${major}.${minor}.${patch}-prerelease${increment}"
              # Optional path to check for changes. If any changes are detected in the path the
              # 'changed' output will true. Enter multiple paths separated by spaces.
              # change_path: "src/my-service"
              # Named version, will be used as suffix for name version tag
              namespace: lip
              # If this is set to true, *every* commit will be treated as a new version.
              bump_each_commit: false
              # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
              search_commit_body: false
              # The output method used to generate list of users, 'csv' or 'json'.
              user_format_type: "json"